{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","color","img","title","menu","setState","_this2","react_default","a","createElement","className","items","map","index","style","concat","onClick","clicked","bind","key","src","width","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","src_App_0","document","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.06f8aae1.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nclass App extends Component {\n  constructor(props){\n    super(props);\n\n    this.state = {\n      color: 'merah',\n      img   : 'apple.jpg',\n      title : 'Apel',\n    };\n  }\n\n  clicked(menu){\n    //untuk memperbarui state sesuai dengan menu yang dipilih\n    \n    this.setState({\n      color : menu.color,\n      img   : menu.img,\n      title : menu.title,\n    });\n  }\n  /* gambarku(){\n    var gambar;\n    if (this.state.active.toLocaleLowerCase()==='merah'){\n      gambar = \"apel\";\n    } else if (this.state.active.toLocaleLowerCase()=== 'kuning' ){\n      gambar =\"nanas\";\n    } else if (this.state.active.toLocaleLowerCase() === 'hijau'){\n      gambar =\"alpukat\";\n    } else if (this.state.active.toLocaleLowerCase() === 'biru'){\n      gambar =\"berry\";\n    }\n\n    return <img src={gambar+\".jpg\"} width=\"200\"></img>\n  }\n*/\n  render() {\n    return (\n\n      <div className=\"App\">\n      {/*map akan loop sebanyak menu yang di definisikan*/}\n      {/* kemudian mengembalikan elemen </a> */}\n      \n      <nav className=\"nav\">\n      { this.props.items.map ((menu, index) => {\n        var style = 'menu';\n        \n        if (this.state.color === menu.color){\n          style = `${style} is-active`;\n        }\n\n        return <a \n          className={style+\" \"+menu.color}\n\n          //bind untuk membuat 'menu' bisa dikirim ke fungsi 'clicked'\n          onClick={this.clicked.bind(this,menu)}\n          key={index}\n          >\n          {menu.title}   \n          </a>;\n          //judul pada menu\n      })  }\n      \n      </nav>\n\n        <div className=\"info\">\n          ini adalah <span className={\"selected \" + this.state.color}> {this.state.title}</span>\n          <br/> \n          <br/>\n\n          <img src={this.state.img} width=\"200\"></img>\n          {/*this.gambarku()}\n          */}\n\n        </div>\n        \n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nconst items = [\n    {\n        color   :'merah',\n        img     : 'apple.jpg',\n        title   :'Apel',\n    },\n    {\n        color   :'kuning',\n        img     :'nanas.jpg',\n        title   :'Nanas',\n    },\n    {\n        color   :'hijau',\n        img     :'alpukat.jpg',\n        title   :'Alpukat',\n    },\n    {\n        color   :'biru',\n        img     :'berry.jpg',\n        title   :'Blueberry',\n    },\n];\n\nReactDOM.render(<App items={items} />, \n    document.getElementById('root'));\n\nserviceWorker.register();"],"sourceRoot":""}